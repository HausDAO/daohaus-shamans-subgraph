type Shaman @entity {
  id: ID!
  createdAt: String!
  shamanAddress: Bytes!
  molochAddress: Bytes!
  molochVersion: String!
  shamanType: String!
  details: String!
  enabled: Boolean!
  minionSafeConfig: MinionSafeConfig @derivedFrom(field: "shaman")
  yeeterConfig: YeeterConfig @derivedFrom(field: "shaman")
  yeets: [Yeet!] @derivedFrom(field: "shaman")
  nftOnboarderConfig: NftOnboarderConfig @derivedFrom(field: "shaman")
  onboardNfts: [OnboardNftToken!] @derivedFrom(field: "shaman")
}

type MinionSafeConfig @entity {
  id: ID!
  createdAt: String!
  molochAddress: Bytes!
  shamanAddress: Bytes!
  shaman: Shaman!
  safeAddress: Bytes!
}

type YeeterConfig @entity {
  id: ID!
  createdAt: String!
  molochAddress: Bytes!
  shamanAddress: Bytes!
  shaman: Shaman!
  maxTarget: BigInt!
  raiseEndTime: BigInt!
  raiseStartTime: BigInt!
  maxUnits: BigInt!
  pricePerUnit: BigInt!
  token: Token!
  erc20Only: Boolean!
}

type Yeet @entity {
  id: ID!
  createdAt: String!
  shamanAddress: Bytes!
  molochAddress: Bytes!
  shaman: Shaman!
  contributorAddress: Bytes!
  amount: BigInt!
  lootToGive: BigInt!
  lootToPlatform: BigInt!
  transactionHash: Bytes!
}

type YeeterPlatform @entity {
  id: ID!
  createdAt: String!
  platformFee: BigInt!
  lootPerUnit: BigInt!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
}

type NftOnboarderConfig @entity {
  id: ID!
  createdAt: String!
  molochAddress: Bytes!
  shamanAddress: Bytes!
  shaman: Shaman!
  wrapperAddress: Bytes!
  price: BigInt!
  cap: BigInt!
  lootPerUnit: BigInt!
  daoCut: BigInt!
  initializationParams: Bytes!
}

type OnboardNftToken @entity {
  id: ID!
  shaman: Shaman!
  bound: Boolean!
  tokenId: BigInt!
  owner: Bytes!
}
